openapi: 3.1.0
info:
  title: TestZeus Hercules API
  description: API for running and managing TestZeus Hercules tests
  version: 1.0.0
  x-logo:
    url: https://testzeus.io/logo.png
servers:
  - url: http://localhost:8003
    description: Local development server
paths:
  /:
    get:
      summary: Root endpoint
      description: Returns basic API information
      operationId: root
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  name:
                    type: string
                  version:
                    type: string

/executions:
  get:
    summary: Get all executions
    description: |
      Returns a list of all test executions with optional status filtering.
      
      - Filter by status: running, pending, completed, failed
      - Shows execution progress (completed_tests/total_tests)
      - Includes source information (memory vs database)
      - Automatically corrects stale execution statuses
      
      Use this to monitor all active executions or analyze historical runs.
      
      Example response:
      ```json
      [
        {
          "execution_id": "uuid-1234",
          "status": "running",
          "start_time": "2024-01-15T10:30:00Z",
          "total_tests": 5,
          "completed_tests": 2,
          "failed_tests": 0,
          "source": "memory"
        }
      ]
      ```
    operationId: getExecutionList
    parameters:
      - name: status
        in: query
        required: false
        schema:
          type: string
          enum: [running, pending, completed, failed]
        description: Filter executions by status
    responses:
        '200':
          description: List of executions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    execution_id:
                      type: string
                    status:
                      type: string
                      enum: [pending, running, completed, failed]
                      description: Either Dont pass a Body but cannot pass empty string
                    start_time:
                      type: string
                      format: date-time
                    end_time:
                      type: string
                      format: date-time
                      nullable: true
                    total_tests:
                      type: integer
                      description: Total number of tests in this execution
                    completed_tests:
                      type: integer
                      description: Number of completed tests
                    failed_tests:
                      type: integer
                      description: Number of failed tests
                    source:
                      type: string
                      enum: [memory, database]
                      description: Source of the execution data

  /executions/{execution_id}:
    get:
      summary: Get execution status
      description: Returns the status of a test execution
      operationId: getExecutionStatus
      parameters:
        - name: execution_id
          in: path
          required: true
          schema:
            type: string
          description: Unique ID of the execution
      responses:
        '200':
          description: Execution details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  execution_id:
                    type: string
                  status:
                    type: string
                  start_time:
                    type: string
                    format: date-time
                  end_time:
                    type: string
                    format: date-time
                    nullable: true
                  test_infos:
                    type: array
                    items:
                      type: object
        '404':
          description: Execution not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string



/executions/{execution_id}/details:
  get:
    summary: Get detailed execution information
    description: |
      Returns comprehensive details about a test execution including status, progress, and results.
      
      Provides:
      - Execution status (pending/running/completed/failed)
      - Test progress (completed_tests/total_tests)
      - XML result analysis with pass/fail status
      - Database records of all test runs with steps and events
      - Test artifacts (screenshots, logs, proofs)
      
      Use this to monitor execution progress and analyze results after completion.
      
      Example response structure:
      ```json
      {
        "execution_id": "12345-uuid",
        "status": "completed",
        "test_passed": true,
        "test_summary": "All tests passed successfully",
        "xml_results": [...],
        "database_records": [...],
        "completed_tests": 3,
        "total_tests": 3
      }
      ```
    operationId: getExecutionDetails
    parameters:
      - name: execution_id
        in: path
        required: true
        schema:
          type: string
        description: Unique ID of the execution
    responses:
        '200':
          description: Execution details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  execution_id:
                    type: string
                  memory_data:
                    type: object
                    properties:
                      status:
                        type: string
                      start_time:
                        type: string
                        format: date-time
                      end_time:
                        type: string
                        format: date-time
                        nullable: true
                      result:
                        type: object
                        nullable: true
                      archived_path:
                        type: string
                        nullable: true
                      test_dir:
                        type: string
                        nullable: true
                      test_infos:
                        type: array
                        items:
                          type: object
                  database_records:
                    type: array
                    items:
                      type: object
                      properties:
                        run_id:
                          type: integer
                        test_id:
                          type: string
                        status:
                          type: string
                        start_time:
                          type: string
                          format: date-time
                        end_time:
                          type: string
                          format: date-time
                          nullable: true
                        browser_type:
                          type: string
                        headless:
                          type: boolean
                        environment:
                          type: string
                        metadata:
                          type: object
                        steps:
                          type: array
                          items:
                            type: object
                        events:
                          type: array
                          items:
                            type: object
                  total_database_records:
                    type: integer
                    nullable: true
                  database_error:
                    type: string
                    nullable: true
        '404':
          description: Execution not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string

  /update-execution-status/{execution_id}:
    get:
      summary: Force update execution status
      description: Force updates the status of an execution based on its test results
      operationId: updateExecutionStatus
      parameters:
        - name: execution_id
          in: path
          required: true
          schema:
            type: string
          description: Unique ID of the execution to update
      responses:
        '200':
          description: Execution status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  execution_id:
                    type: string
                  status:
                    type: string
                    enum: [pending, running, completed, failed]
                  completed_tests:
                    type: integer
                  total_tests:
                    type: integer
                  failed_tests:
                    type: integer
        '404':
          description: Execution not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string

  /tests/{execution_id}:
    get:
      summary: Get test status
      description: Returns the status of a specific test
      operationId: getTestStatus
      parameters:
        - name: execution_id
          in: path
          required: true
          schema:
            type: string
          description: Unique ID of the test execution
      responses:
        '200':
          description: Test status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResult'
        '404':
          description: Test not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
    delete:
      summary: Delete test
      description: Delete a test execution from tracking
      operationId: deleteTest
      parameters:
        - name: execution_id
          in: path
          required: true
          schema:
            type: string
          description: Unique ID of the test execution to delete
      responses:
        '200':
          description: Test deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Test not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string

  /tests:
    get:
      summary: List tests
      description: Returns a list of all test executions, optionally filtered by status
      operationId: listTests
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
          description: Filter tests by status (e.g., running, completed, failed)
      responses:
        '200':
          description: List of tests
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    execution_id:
                      type: string
                    test_id:
                      type: string
                    status:
                      type: string
                    start_time:
                      type: string
                      format: date-time
                    end_time:
                      type: string
                      format: date-time
                      nullable: true

  /available-tests:
    get:
      summary: List available tests
      description: Returns a list of tests available for execution
      operationId: listAvailableTests
      responses:
        '200':
          description: List of available tests
          content:
            application/json:
              schema:
                type: object
                properties:
                  features:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                        name:
                          type: string
                        type:
                          type: string
                  scripts:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                        name:
                          type: string
                        type:
                          type: string

  /library:
    get:
      summary: List library contents
      description: Lists contents of the template library directory
      operationId: listLibrary
      parameters:
        - name: path
          in: query
          required: false
          schema:
            type: string
          description: Subdirectory path within the library to list
      responses:
        '200':
          description: List of library contents
          content:
            application/json:
              schema:
                type: object
                properties:
                  path:
                    type: string
                  directories:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        path:
                          type: string
                  files:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        path:
                          type: string
                        size:
                          type: integer
                        last_modified:
                          type: string
                          format: date-time

  /search-library:
    get:
      summary: Search library
      description: Search for feature files in the library that match a query string
      operationId: searchLibrary
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          description: Search query string
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  query:
                    type: string
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                        name:
                          type: string
                        type:
                          type: string
                        matched_lines:
                          type: array
                          items:
                            type: object
                            properties:
                              line:
                                type: integer
                              content:
                                type: string

  /archives:
    get:
      summary: List archived test results
      description: Returns a list of archived test results
      operationId: listArchives
      responses:
        '200':
          description: List of archived test results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    path:
                      type: string
                    size:
                      type: integer
                    last_modified:
                      type: string
                      format: date-time
                    execution_id:
                      type: string
                    details:
                      type: object
                      nullable: true

  /archives/{archive_name}:
    delete:
      summary: Delete archived test result
      description: Delete an archived test result
      operationId: deleteArchive
      parameters:
        - name: archive_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the archive to delete
      responses:
        '200':
          description: Archive deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Archive not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string

  /test-definition-data:
    get:
    summary: Get all test definition data
    description: |
      Returns complete content of all feature files and test data files from the library.
      
      - Scans `data/manager/lib/features/` for Gherkin feature files
      - Scans `data/manager/lib/test_data/` for test data files
      - Provides file paths (relative and absolute) and full content
      
      Use this to discover available templates before executing tests with `runningATemplate`.
      
      Example response structure:
      ```json
      {
        "feature_data_list": [
          {
            "path": "basic/login.feature",
            "content": "Feature: Login Test\n...",
            "is_binary": false
          }
        ],
        "test_data_list": [
          {
            "path": "credentials.txt", 
            "content": "username=admin\npassword=secret",
            "is_binary": false
          }
        ]
      }
      ```
    operationId: getAllTestDefinitionData
    responses:
        '200':
          description: Test definition data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  feature_data_list:
                    type: array
                    description: List of feature files with their content
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          description: Relative path from the features root directory
                        full_file_path:
                          type: string
                          description: Full file system path to the file
                        content:
                          type: string
                          description: Complete content of the feature file
                        is_binary:
                          type: boolean
                          description: Flag indicating if the file is binary
                  test_data_list:
                    type: array
                    description: List of test data files with their content
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          description: Relative path from the test_data root directory
                        full_file_path:
                          type: string
                          description: Full file system path to the file
                        content:
                          type: string
                          description: Complete content of the test data file
                        is_binary:
                          type: boolean
                          description: Flag indicating if the file is binary
                  operation_id:
                    type: string
                    format: uuid
                    description: Unique identifier for this operation
              example:
                feature_data_list:
                  - path: "basic/test.feature"
                    full_file_path: "/path/to/data/manager/lib/features/basic/test.feature"
                    content: |
                      Feature: Basic Navigation Functionality
                        Scenario: User Performs Basic Navigation
                          Given a user is on the test pages
                          When the user clicks on a button
                          Then the page should navigate correctly
                    is_binary: false
                test_data_list:
                  - path: "test_data.txt"
                    full_file_path: "/path/to/data/manager/lib/test_data/test_data.txt"
                    content: "url=https://example.com\nbutton_text=Submit\nexpected_url=https://example.com/success"
                    is_binary: false
                operation_id: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Error message describing what went wrong

  /tests/run-from-template-new:
    post:
    summary: Run tests from template
    description: |
      Execute one or more tests using templates or scripts from the library. This endpoint provides comprehensive test execution capabilities with real-time monitoring.
      
      ## Core Capabilities
      - Execute tests using feature templates from the library (Gherkin format)
      - Provide custom feature scripts directly for one-off tests
      - Use test data templates with variable substitution
      - Configure browser settings (headless mode, browser type)
      - Set execution timeouts and environment-specific configurations
      - Run in mock mode for testing without actual execution
      - Track execution progress with unique execution IDs
      
      ## Template Path Configuration
      All template paths are relative to system library directories:
      - **Feature templates**: `data/manager/lib/features/` (e.g., "basic/test.feature")
      - **Test data templates**: `data/manager/lib/test_data/` (e.g., "credentials.txt")
      
      ## Request Structure
      **Required Fields:**
      - `test_infos` (array): Array of test configurations
        - `order` (integer): Execution sequence (0-based, tests run sequentially)
        - `feature` (object): Either `templatePath` OR `featureScript` (mutually exclusive)
          - `templatePath`: Path to library template relative to features directory
          - `featureScript`: Custom Gherkin script for one-off tests
      
      **Optional Fields per test:**
      - `testData` (array): Test data templates for variable substitution
      - `headless` (boolean, default: false): Browser visibility (true for CI/CD)
      - `timeout` (integer, default: 300): Max execution time in seconds (1-3600)
      - `browser` (string, default: "chromium"): Browser engine ("chromium", "firefox", "webkit")
      
      **Global Options:**
      - `mock` (boolean, default: false): Simulate execution without running tests
      - `environment` (string, default: "test"): Target environment ("production", "staging", "development", "test")
      
      ## Response Structure
      Returns immediately with:
      - `execution_id`: Unique UUID for tracking progress
      - `status`: "pending" (scheduled), "running" (executing), or "mocked" (simulated)
      - `start_time`: ISO timestamp of execution creation
      - `message`: Human-readable status message
      - `test_count`: Number of tests in execution
      - `tests`: Array of test details with order and test_id
      
      ## Example Usage
      ```json
      {
        "test_infos": [
          {
            "order": 0,
            "feature": {
              "templatePath": "login/oauth.feature"
            },
            "testData": [
              {"templatePath": "prod_credentials.txt"}
            ],
            "headless": true,
            "timeout": 600,
            "browser": "chromium"
          },
          {
            "order": 1,
            "feature": {
              "featureScript": "Feature: Custom Test\n  Scenario: Verify endpoint\n    Given I have API access\n    When I call the endpoint\n    Then I get success response"
            },
            "browser": "firefox"
          }
        ],
        "mock": false,
        "environment": "staging"
      }
      ```
      
      ## Test Data Variable Substitution
      Test data files contain key-value pairs (e.g., `username=admin&password=secret123`) that get substituted into feature scripts using `${variable}` syntax in Gherkin steps.
      
      ## Execution Flow
      1. Submit test configuration to get unique execution_id
      2. Tests execute sequentially by order value
      3. Monitor progress using execution_id with other endpoints
      4. Retrieve results and artifacts when complete
      
      ## Error Responses
      - **400**: Invalid request (missing required fields, invalid configuration)
      - **500**: Server error (infrastructure issues, database failures)
      
      ## Integration Notes
      - Use `getAllContent` operationId to discover available templates
      - Execution runs asynchronously - use execution_id for status checks
      - Mock mode useful for testing configurations without resource usage
      - Results include detailed XML analysis and test artifacts
    operationId: runningATemplate
        
    requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - test_infos
              properties:
                test_infos:
                  type: array
                  description: Array of test configurations to execute
                  items:
                    type: object
                    required:
                      - order
                      - feature
                    properties:
                      order:
                        type: integer
                        description: |
                          Execution sequence number for this test (zero-based).
                          Tests are executed sequentially based on this value.
                        minimum: 0
                        example: 0
                      feature:
                        type: object
                        description: |
                          Feature definition - either a template path OR custom script.
                          You must provide exactly one of templatePath or featureScript. that is available from operationId getAllContent
                        properties:
                          templatePath:
                            type: string
                            nullable: true
                            description: |
                              Path to a feature template file in the library.
                              Path is relative to `data/manager/lib/features/`.
                              Example: "basic/test.feature" points to
                              `data/manager/lib/features/basic/test.feature`
                            example: "basic/test.feature"
                          featureScript:
                            type: string
                            nullable: true
                            description: |
                              Custom feature script in Gherkin format.
                              Use this for one-off tests not in the library.
                              Must be valid Gherkin syntax.
                            example: |
                              Feature: Login Test
                                Scenario: Successful login
                                  Given I am on the login page
                                  When I enter valid credentials
                                  Then I should be logged in
                      testData:
                        type: array
                        nullable: true
                        description: |
                          Optional array of test data templates.
                          Each template provides variables for the feature script.
                        items:
                          type: object
                          required:
                            - templatePath
                          properties:
                            templatePath:
                              type: string
                              description: |
                                Path to test data file relative to `data/manager/lib/test_data/`.
                                Contains key-value pairs for variable substitution.
                                Example: "credentials.txt" contains username=test&password=pass
                              example: "test_data.txt"
                      headless:
                        type: boolean
                        default: false
                        description: |
                          Whether to run the browser in headless mode.
                          - false: Browser window is visible (useful for debugging)
                          - true: Browser runs without UI (better for CI/CD)
                        example: false
                      timeout:
                        type: integer
                        default: 300
                        description: |
                          Maximum time in seconds for test execution.
                          Test will be terminated if it exceeds this limit.
                        minimum: 1
                        maximum: 3600
                        example: 300
                      browser:
                        type: string
                        enum: ["chromium", "firefox", "webkit"]
                        default: "chromium"
                        description: |
                          Browser engine to use for test execution.
                          - chromium: Chrome/Edge compatible
                          - firefox: Mozilla Firefox
                          - webkit: Safari compatible
                        example: "chromium"
                mock:
                  type: boolean
                  default: false
                  description: |
                    Controls whether tests are actually executed or simulated.
                    - false: Tests are executed normally
                    - true: Tests are validated and simulated without actual execution
                  example: false
                environment:
                  type: string
                  enum: ["production", "staging", "development", "test"]
                  default: "test"
                  description: |
                    Target environment for test execution.
                    May affect environment-specific configurations.
                  example: "test"
    responses:
        '200':
          description: Tests scheduled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  execution_id:
                    type: string
                    description: |
                      Unique identifier for tracking the test execution.
                      Use this ID to monitor progress and retrieve results.
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  status:
                    type: string
                    description: |
                      Initial status of the execution.
                      - "pending": Tests are scheduled but not yet started
                      - "running": Tests are currently executing
                      - "mocked": Tests were run in mock mode
                    enum: ["pending", "running", "mocked"]
                    example: "pending"
                  start_time:
                    type: string
                    format: date-time
                    description: Timestamp when the execution was created
                    example: "2024-01-15T10:30:00Z"
                  message:
                    type: string
                    description: Human-readable message about the execution
                    example: "Tests started successfully"
                  test_count:
                    type: integer
                    description: Number of tests included in this execution
                    example: 1
                  tests:
                    type: array
                    description: Details of individual tests in this execution
                    items:
                      type: object
                      properties:
                        order:
                          type: integer
                          description: Execution order of this test
                          example: 0
                        test_id:
                          type: string
                          description: Unique identifier for this specific test
                          example: "test_0"
                  wsUrl:
                    type: string
                    description: WebSocket URL to receive real-time logs for this execution. Useful for observing execution progress in a separate terminal or IDE. THIS SHOULD BE UTILISED TO MONITOR IN BACKGROUND. COMMAND CAN WE BUSED IWTH SOCAT like  websocat ws://127.0.0.1:8003/ws/logs/13db9744-abe6-4947-80cc-8612a91a0e21
                    example: "ws://localhost:8080/ws/123e4567-e89b-12d3-a456-426614174000"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Error message describing what went wrong
                    example: "Either templatePath or featureScript must be provided"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Error message describing the server error
                    example: "Error running tests from templates: Database connection failed"


  /library/content:
    get:
      summary: Get full content of library files
      description: |
        Returns the complete content of all feature scripts and test data files in the library.
        This endpoint provides access to the raw content of files stored in:
        - data/manager/lib/features (feature scripts)
        - data/manager/lib/test_data (test data)
        
        You can use optional query parameters to filter the results by:
        - Directory paths
        - File patterns
        - Content search
        
        When no filters are provided, all files from both directories are returned.
        
        This endpoint is particularly useful for:
        - Exploring available test scripts and data
        - Understanding file structure before making test requests
        - Copying content to create custom files
        - Debugging template issues
      operationId: getLibraryContent
      tags:
        - Library
      parameters:
        - name: feature_path
          in: query
          required: false
          schema:
            type: string
          description: |
            Optional filter for feature scripts by path.
            Example: "basic" will return all files in data/manager/lib/features/basic
        - name: test_data_path
          in: query
          required: false
          schema:
            type: string
          description: |
            Optional filter for test data by path.
            Example: "credentials" will return all files in data/manager/lib/test_data/credentials
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: |
            Optional content search filter.
            Only returns files containing the specified text.
      responses:
        '200':
          description: Successfully retrieved library content
          content:
            application/json:
              schema:
                type: object
                properties:
                  script_data_list:
                    type: array
                    description: List of feature script files with their content
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          description: Relative path to the feature script from data/manager/lib/features
                        content:
                          type: string
                          description: Full content of the feature script file
                        size:
                          type: integer
                          description: Size of the file in bytes
                        last_modified:
                          type: string
                          format: date-time
                          description: Last modification timestamp
                  test_data_list:
                    type: array
                    description: List of test data files with their content
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          description: Relative path to the test data file from data/manager/lib/test_data
                        content:
                          type: string
                          description: Full content of the test data file
                        size:
                          type: integer
                          description: Size of the file in bytes
                        last_modified:
                          type: string
                          format: date-time
                          description: Last modification timestamp
                  total_features:
                    type: integer
                    description: Total count of feature files found
                  total_test_data:
                    type: integer
                    description: Total count of test data files found
              examples:
                fullContent:
                  summary: Sample content from features and test data
                  value:
                    script_data_list:
                      - path: "basic/test.feature"
                        content: |
                          Feature: Basic Navigation Functionality

                            Scenario: User Performs Basic Navigation
                              Given a user is on the test pages at "https://testpages.eviltester.com/styled/index.html"
                              And the user clicks on the "About" button in the top nav
                              Then the page should navigate to "https://testpages.eviltester.com/styled/page?app=testpages&t=About"
                              And the first heading of the article should be "About TestPages"
                        size: 426
                        last_modified: "2025-05-15T14:23:18Z"
                    test_data_list:
                      - path: "test_data.txt"
                        content: |
                          url=https://testpages.eviltester.com/styled/index.html
                          button_text=About
                          expected_url=https://testpages.eviltester.com/styled/page?app=testpages&t=About
                          expected_heading=About TestPages
                        size: 188
                        last_modified: "2025-05-15T14:25:42Z"
                    total_features: 1
                    total_test_data: 1

components:
  schemas:
    FeatureSpec:
      type: object
      properties:
        templatePath:
          type: string
          nullable: true
          description: |
            Path to a feature template file in the library, e.g. 'basic/test.feature'.
            These templates contain predefined test scenarios written in Gherkin syntax.
            
            IMPORTANT: Paths are relative to the system's feature library directory:
            `data/manager/lib/features/`
            
            For example, to use a feature located at:
            `data/manager/lib/features/basic/test.feature`
            
            Specify the path as: `basic/test.feature`
            
            Nested paths within the features directory are also supported:
            `checkout/payment/credit_card.feature`
        featureScript:
          type: string
          nullable: true
          description: |
            Custom feature script content provided directly in the request.
            Use this when you need a one-off test script that doesn't exist in the template library.
            Must be valid Gherkin syntax following the format:
            
            ```gherkin
            Feature: Feature name
              Scenario: Scenario name
                Given some precondition
                When some action occurs
                Then some result is expected
            ```
      description: |
        Defines the test script to be executed, either by reference to a template or direct inclusion.
        
        ## Overview
        
        The FeatureSpec represents the actual test definition that will be executed. It provides
        two mutually exclusive methods for specifying a test:
        
        1. Using a pre-defined template from the library (templatePath)
        2. Providing a custom script directly in the request (featureScript)
        
        ## Template Paths
        
        When using templatePath, the path is relative to the system feature library located at:
        `data/manager/lib/features/`
        
        Examples:
        - `basic/login.feature` -> `data/manager/lib/features/basic/login.feature`
        - `checkout/payment.feature` -> `data/manager/lib/features/checkout/payment.feature`
        
        ## Feature Scripts
        
        Feature scripts must be written in Gherkin syntax (Given/When/Then format). These scripts
        define the actual steps that will be executed during the test.
        
        Example script:
        ```gherkin
        Feature: User Login
          Scenario: Successful login with valid credentials
            Given I am on the login page
            When I enter valid username and password
            And I click the login button
            Then I should be logged in successfully
        ```
        
        ## Behavior
        
        - You must provide exactly ONE of templatePath OR featureScript
        - If both are provided, the API will return an error
        - If neither is provided, the API will return an error
        - Templates are preferred for reusable tests
        - FeatureScript is preferred for one-time or dynamic tests

    TestDataSpec:
      type: object
      properties:
        templatePath:
          type: string
          description: |
            Path to a test data template file in the library, e.g. 'test_data.txt'.
            
            IMPORTANT: Paths are relative to the system's test data library directory:
            `data/manager/lib/test_data/`
            
            For example, to use a test data file located at:
            `data/manager/lib/test_data/test_data.txt`
            
            Specify the path as: `test_data.txt`
            
            Nested paths within the test_data directory are also supported:
            `credentials/production_users.txt`
            
            Test data files contain variables and values in a structured format that
            will be substituted into placeholders in the feature script.
      required:
        - templatePath
      description: |
        Specifies test data to be used when executing a feature script.
        
        ## Overview
        
        TestDataSpec provides a way to parameterize test scripts, enabling data-driven testing.
        Each TestDataSpec references a data file containing key-value pairs that will be injected
        into the feature script at runtime, replacing placeholders with actual test values.
        
        ## Template Paths
        
        Test data template paths are relative to the system test data library located at:
        `data/manager/lib/test_data/`
        
        Examples:
        - `login/credentials.txt` -> `data/manager/lib/test_data/login/credentials.txt`
        - `products/catalog.txt` -> `data/manager/lib/test_data/products/catalog.txt`
        
        ## File Format
        
        Test data files contain key-value pairs in the format:
        ```
        key1=value1
        key2=value2
        key3=value3
        ```
        
        ## Variable Substitution
        
        In the feature script, variables are referenced using the ${variable} syntax:
        
        ```gherkin
        Given I navigate to "${baseUrl}"
        When I login with username "${username}" and password "${password}"
        Then I should see "${welcomeMessage}"
        ```
        
        ## Multiple Data Files
        
        You can provide multiple TestDataSpec entries for a single test, which allows:
        - Modular organization of test data
        - Combining shared data (e.g., environment variables) with test-specific data
        - Overriding values (later files will override values from earlier files)

    TestInfo:
      type: object
      properties:
        order:
          type: integer
          description: |
            The execution sequence number for this test within the batch (zero-based index).
            Tests are executed sequentially based on this value, from lowest to highest.
            For parallel execution, tests with the same order value may run simultaneously.
        feature:
          $ref: '#/components/schemas/FeatureSpec'
        testData:
          type: array
          items:
            $ref: '#/components/schemas/TestDataSpec'
          nullable: true
          description: |
            Optional array of test data templates to use with this test.
            Each template provides variable values that will be injected into the feature script.
            Multiple test data templates can be combined for complex test scenarios.
        headless:
          type: boolean
          default: false
          description: |
            Controls browser visibility during test execution:
            - false: Browser window is visible (useful for debugging)
            - true: Browser runs in headless mode without visible UI (better for CI/CD pipelines)
        timeout:
          type: integer
          default: 300
          description: |
            Maximum time in seconds to allow the test to run before forcibly terminating it.
            Prevents tests from hanging indefinitely. Default is 300 seconds (5 minutes).
        browser:
          type: string
          enum: ["chromium", "firefox", "webkit"]
          default: "chromium"
          description: |
            Browser engine to use for test execution.
            Supports Chromium (Chrome/Edge), Firefox, or WebKit (Safari).
      required:
        - order
        - feature
      description: |
        Comprehensive configuration for a single test execution.
        
        ## Overview
        
        The TestInfo object is the fundamental unit of test configuration. It defines all aspects
        of a single test execution, including what to test, the test inputs, and how the test
        should be run.
        
        ## Core Components
        
        Each TestInfo combines:
        
        1. **Feature Definition** - What to test
           - Either a reference to a template or a custom script
           - Defines the test steps using Gherkin syntax
        
        2. **Test Data** - Input parameters
           - Optional array of data templates
           - Provides variables that will be substituted into the feature script
           - Enables data-driven testing
        
        3. **Execution Configuration** - How to run the test
           - Order - Sequence number for execution
           - Headless - Whether to show browser UI
           - Timeout - Maximum execution time
           - Browser - Which browser engine to use
        
        ## Test Data Substitution
        
        When test data is provided, the system:
        1. Loads the feature script (from template or direct input)
        2. Loads each test data file in the specified order
        3. Substitutes variables in the feature script with values from the test data
        4. Executes the resulting script
        
        ## Browser Selection
        
        The `browser` property controls which browser engine will execute the test:
        - chromium - Chrome/Edge (default)
        - firefox - Mozilla Firefox
        - webkit - Safari
        
        ## Execution Order
        
        Tests are executed according to their `order` value (lowest to highest).
        Tests with the same order value may be executed in parallel, depending on
        the system configuration.
        
        ## Use Cases
        
        - Functional testing of web applications
        - Regression testing of critical workflows
        - Data-driven testing across multiple inputs
        - Cross-browser compatibility testing
        - Performance benchmarking with timeouts
        - Visual testing (non-headless mode)
        - CI/CD pipeline integration (headless mode)

    TestInfosRequest:
      type: object
      properties:
        test_infos:
          type: array
          items:
            $ref: '#/components/schemas/TestInfo'
          description: |
            Array of test configurations to be executed as a single batch.
            Each entry defines a complete test with its feature, test data, and execution settings.
            Tests are executed according to their "order" property value, from lowest to highest.
        mock:
          type: boolean
          default: false
          description: |
            Controls whether tests are actually executed or just simulated:
            
            - false (default): Tests are fully executed using real browsers
            - true: Tests are validated but not executed; useful for testing API integration
              or verifying test configurations without running the actual tests
        environment:
          type: string
          enum: ["production", "staging", "development", "test"]
          default: "test"
          description: |
            Target environment for test execution. 
            This may affect environment-specific configuration like base URLs, 
            credentials, or test data selection.
      required:
        - test_infos
      description: |
        Main request object for executing a batch of tests based on templates or custom scripts.
        
        ## Overview
        
        The TestInfosRequest is the top-level request object for the /tests/run-from-template API.
        It encapsulates a batch of tests that will be executed as a single unit, along with
        global settings that apply to the entire batch.
        
        ## Core Components
        
        1. **Test Array** - The collection of tests to execute
           - Array of TestInfo objects
           - Each defines a complete test configuration
           - Tests run in sequence based on their order property
        
        2. **Global Settings** - Settings for the entire batch
           - Mock mode - Whether to simulate execution
           - Environment - Target environment for the tests
        
        ## Execution Flow
        
        When this request is processed:
        
        1. The system validates all test configurations
        2. Creates an execution record and assigns a unique execution_id
        3. Initializes test tracking for each test in the batch
        4. Executes tests in sequence based on their order values
        5. Returns the execution_id which can be used to monitor progress
        
        ## Mock Mode
        
        When mock=true, the system:
        - Validates all test configurations
        - Creates execution records in the database
        - Simulates test execution with fake results
        - Does NOT start any actual browser instances
        
        This is useful for:
        - Testing API integration without running actual tests
        - Validating test configurations before execution
        - Performance testing the execution framework itself
        
        ## Environment Selection
        
        The environment property specifies which environment the tests should target:
        - production - Live production environment
        - staging - Pre-production staging environment
        - development - Development environment
        - test - Isolated test environment (default)
        
        ## Response
        
        The API returns an execution_id that can be used to:
        - Track execution progress
        - Retrieve test results
        - Access execution details and logs
        
        ## Execution Monitoring
        
        After submitting this request, you can:
        1. Monitor progress with GET /executions/{execution_id}
        2. View detailed results with GET /executions/{execution_id}/details
        3. Force status updates with GET /update-execution-status/{execution_id}
        
        ## Use Cases
        
        - Execute a single test with specific settings
        - Run a batch of related tests in a defined sequence
        - Perform data-driven testing with different test data
        - Run a comprehensive test suite across environments
        - Validate test configurations without execution
        - Integration with CI/CD pipelines
        
        ## Example Workflow
        
        1. Create a request with multiple test configurations
        2. Submit to /tests/run-from-template
        3. Store the returned execution_id
        4. Poll /executions/{execution_id} to monitor progress
        5. Retrieve detailed results when complete

    TestRequest:
      type: object
      properties:
        test_id:
          type: string
        options:
          type: object
          nullable: true
        mock:
          type: boolean
          default: false
      required:
        - test_id
      description: Request for a single test execution

    TestResponse:
      type: object
      properties:
        execution_id:
          type: string
        test_id:
          type: string
        status:
          type: string
        start_time:
          type: string
      required:
        - execution_id
        - test_id
        - status
        - start_time
      description: Response for a test execution request

    TestResult:
      type: object
      properties:
        execution_id:
          type: string
        test_id:
          type: string
        status:
          type: string
        start_time:
          type: string
        end_time:
          type: string
          nullable: true
        result:
          type: object
          nullable: true
        error:
          type: string
          nullable: true
        archived_path:
          type: string
          nullable: true
      required:
        - execution_id
        - test_id
        - status
        - start_time
      description: Result of a test execution

  /bulk-upload-files:
    post:
      summary: Upload multiple files in bulk
      description: |
        Upload multiple files in bulk to the test definition directories.
        
        This endpoint accepts an array of file objects with the following structure:
        ```json
          {
           "files": [
                  {
                  "path": "relative path within the appropriate directory",
                  "type": "feature|test_data",
                  "content": "The full text content of the file"
                  }
              ]
           }
        ```
        
        Features are saved to `data/manager/lib/features/` directory.
        Test data is saved to `data/manager/lib/test_data/` directory.
        
        Returns a list of results for each file upload operation.
      operationId: bulkUploadTestDefinitionFiles
      tags:
        - Library
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                files:
                type: array
                items:
                  type: object
                  required:
                    - path
                    - type
                    - content
                  properties:
                    path:
                      type: string
                      description: Relative path within the appropriate directory
                      example: "basic/login.feature"
                    type:
                      type: string
                      enum: ["feature", "test_data"]
                      description: Type of file determining where it will be stored
                      example: "feature"
                    content:
                      type: string
                      description: The full text content of the file
                      example: "Feature: Login Test\n  Scenario: Test login\n    Given I am on the login page\n    When I enter credentials\n    Then I should be logged in"
      responses:
        '200':
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  operation_id:
                    type: string
                    format: uuid
                    description: Unique ID for this bulk upload operation
                  total_files:
                    type: integer
                    description: Total number of files in the request
                  successful:
                    type: integer
                    description: Number of files successfully uploaded
                  failed:
                    type: integer
                    description: Number of files that failed to upload
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          description: Path of the file from the request
                        status:
                          type: string
                          enum: ["success", "error"]
                          description: Status of this individual file upload
                        message:
                          type: string
                          description: Additional information or error message

tags:
  - name: Test Management
    description: Endpoints for managing test executions
  - name: Library
    description: Endpoints for managing the test template library
  - name: Archives
    description: Endpoints for managing archived test results
